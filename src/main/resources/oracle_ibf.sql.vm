#**

 Template parameters:
 $tableColumns: array of com.example.integrations.oracle.meta.OracleColumnInfo
 $table: TableRef
 $helper: com.example.integrations.oracle.ibf.OracleIBFQueryBuilder.TemplateHelper
 $primeDivisors: long[3] Provided by ibfDbUtils
 $partitionOffsets: long[3] - Provided by ibfDbUtils
 $dateNumberFormat: formatter to read date as a number
 $rowHashPortionNumber: number of row hash portion to be divided
 $portionLength: length of a portion
 *#
#evaluate($output)

#macro(invertibleBloomFilter)
    #if($useConnectorAggregation)
        #invertibleBloomFilterWithConnectorAggregation()
    #else
        #invertibleBloomFilterWithDBAggregation()
    #end
#end

#macro(retrieveData)
    SELECT *
    FROM (SELECT #columnsWithoutHash()
          FROM $table
         )
    WHERE "_ibf_row_hash" = ?
#end

#macro(invertibleBloomFilterWithDBAggregation)
    SELECT "_ibf_cell_index",
        #set($endIndex = $tableColumns.size() - 1)
        #foreach($i in [0..$endIndex])
            #aggregate("_ibf_row_hash_number$i"),
        #end
        COUNT ("_ibf_row_hash_number") AS "count"
    FROM (
        #if($fastIbfQuery)
            #queryWithoutCartesianJoin()
        #else
            #queryWithCartesianJoin()
        #end
        )
    GROUP BY "_ibf_cell_index"
#end

#macro(invertibleBloomFilterWithConnectorAggregation)
SELECT
    #set($endIndex = $rowHashPortionNumber - 1)
    #foreach($i in [0..$endIndex])
        TO_NUMBER(SUBSTR("_ibf_row_hash", 1 + $portionLength * $i, $portionLength),
                  'XXXXXXXX')                                          AS "_ibf_row_hash_number$i",
    #end
        TO_NUMBER("_ibf_row_hash", 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') AS "_ibf_row_hash_number",
    #set($endIndex = $tableColumns.size() - 1)
    #foreach($i in [0..$endIndex])
        #if($i > 0),#end
        "_ibf_column$i"
    #end
FROM(SELECT #columns()
     FROM $table
)
#end

######
### Column Expressions
######
#macro(columns)
    #createRowHashCol() AS "_ibf_row_hash",
    #set($endIndex = $tableColumns.size() - 1)
    #foreach($i in [0..$endIndex])
        #set($column = $tableColumns[$i])
        #define($stringifiedColumn)
            #stringifyNullable($column)
        #end
        #if($i > 0),#end #md5_128bits($stringifiedColumn)
        AS "_ibf_column$i"
    #end
#end

#macro(to_number_columns)
    TO_NUMBER("_ibf_row_hash",'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')  AS "_ibf_row_hash_number",
    #set($endIndex = $rowHashPortionNumber - 1)
    #foreach($i in [0..$endIndex])
        TO_NUMBER(SUBSTR("_ibf_row_hash", 1 + $portionLength * $i, $portionLength),'XXXXXXXX')  AS "_ibf_row_hash_number$i"#if($i < $endIndex),#end
    #end
#end

#macro(columnsWithoutHash)
    #createRowHashCol() AS "_ibf_row_hash",
    #set($endIndex = $tableColumns.size() - 1)
    #foreach($i in [0..$endIndex])
        #set($column = $tableColumns[$i])
        #if($i > 0),#end #stringifyNullable($column) AS "_ibf_column$i"
    #end
#end

#macro(stringifyNullable $column)
    #if ($column.isAddedSinceLastSync())
        #if ($column.getColumnDefaultValue().isPresent())
            #stringifyDefault($column, $column.getColumnDefaultValue().get())
        #else
            ''
        #end
    #else
        COALESCE(#stringify($column), '|')
    #end
#end

#macro(stringify $column)
    #if ($helper.isBinary($column))
        RAWTOHEX($column)
    #elseif ($helper.isString($column))
        $column
    #elseif ( $helper.isDate($column))
        TO_CHAR($column, '$dateNumberFormat')
    #else
        TO_CHAR($column)
    #end
#end

#macro(stringifyDefault $column, $defaultValue)
    #if ($helper.isBinary($column))
        RAWTOHEX($defaultValue)
    #elseif ($helper.isString($column))
        $helper.escapeDefaultValue($defaultValue)
    #elseif ( $helper.isDate($column))
        TO_CHAR($defaultValue, '$dateNumberFormat')
    #else
        TO_CHAR($defaultValue)
    #end
#end


######
## Row hash
######
#macro(createRowHashCol)
    #if($useLegacyRowHash)
        #legacyRowHash()
    #else
        #defaultRowHash()
    #end
#end

#macro(legacyRowHash)
    #define($rowRepresentation)
        #foreach ($column in $tableColumns)
            #if ( $foreach.count > 1 ) || '|' || #end
            #stringifyNullable($column)
        #end
    #end
    #md5_128bits($rowRepresentation)
#end

#macro(defaultRowHash)
    #define($rowRepresentation)
        #set($cnt = 0)
        #if($tableColumns.size() > 120)
            #set($endCnt = 120)
        #else
            #set($endCnt = $tableColumns.size() - 1)
        #end
        #set($loops = $tableColumns.size() / 121)
        #foreach($loop in [0..$loops])
            #define($colBatch)
                #foreach($i in [$cnt..$endCnt])
                    #define($stringifiedCol)
                        #stringifyNullable($tableColumns.get($i))
                    #end
                    #md5($stringifiedCol)
                    #if($i < $endCnt)
                 ||
                #end
                #end
            #end
            #md5($colBatch)
            #set($cnt = $endCnt + 1)
            #if($endCnt + 121 > $tableColumns.size())
                #if($endCnt < $tableColumns.size() - 1)
                ||
            #end
                #set($endCnt = $tableColumns.size() - 1)
            #else
            ||
            #set($endCnt = $endCnt + 121)
            #end
        #end
    #end
    #md5_60bits_stdHash($rowRepresentation)
#end

######
## MD5 "60 bits"
######
#macro(md5_60bits $inner)
    #if($oracleVersion < 12)
        TO_NUMBER(SUBSTR(DBMS_OBFUSCATION_TOOLKIT.md5(input => RAWTOHEX($inner)), 1, 15), 'XXXXXXXXXXXXXXX')
    #else
        TO_NUMBER(SUBSTR(STANDARD_HASH("$inner", 'MD5'), 1, 15), 'XXXXXXXXXXXXXXX')
    #end
#end

#macro(md5_128bits $inner)
    #if($oracleVersion < 12)
            DBMS_OBFUSCATION_TOOLKIT.md5(input => RAWTOHEX($inner))
    #else
        #md5($inner)
    #end
#end

#macro(to_number_md5_128bits $inner)
    #if($oracleVersion < 12)
        TO_NUMBER(DBMS_OBFUSCATION_TOOLKIT.md5(input => RAWTOHEX($inner)),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
    #else
        TO_NUMBER(STANDARD_HASH("$inner", 'MD5'),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
    #end
#end

#macro(md5_60bits_stdHash $inner)
    TO_NUMBER(SUBSTR(#md5($inner), 1, 15), 'XXXXXXXXXXXXXXX')
#end

#macro(md5 $input)
    STANDARD_HASH($input, 'MD5')
#end


#macro(aggregate $column)
    #if ($useXOR)
        FT_BITXOR("$column") AS #concatString($column,'_xor')
    #else
        SUM("$column") AS #concatString($column,'_sum')
    #end
#end

#macro(concatString $a $b)
    "$a$b"
#end

#macro(queryWithoutCartesianJoin)
    #foreach($pIndex in [0..2])
    SELECT ABS(MOD("_ibf_row_hash", $primeDivisors[$pIndex])) + $partitionOffsets[$pIndex] as "_ibf_cell_index",
           "_ibf_row_hash",
        #set($endIndex = $tableColumns.size() - 1)
        #foreach($i in [0..$endIndex])
           "_ibf_column$i"#if($i < $endIndex),#end
        #end
    FROM (SELECT #columns()
          FROM $table)
        #if($pIndex < 2)
    UNION ALL
        #end
    #end
#end

#macro(queryWithCartesianJoin)
    SELECT CASE "_ibf_hash_index"
               WHEN 0 THEN ABS(MOD("_ibf_row_hash_number", $primeDivisors[0]))
               WHEN 1 THEN ABS(MOD("_ibf_row_hash_number", $primeDivisors[1])) + $partitionOffsets[1]
               WHEN 2 THEN ABS(MOD("_ibf_row_hash_number", $primeDivisors[2])) + $partitionOffsets[2]
               END as "_ibf_cell_index",
           "_ibf_row_hash_number",
        #set($endIndex = $tableColumns.size() - 1)
        #foreach($i in [0..$endIndex])
           "_ibf_row_hash_number$i"#if($i < $endIndex),#end
        #end
    FROM (SELECT "_ibf_hash_index",
              #to_number_columns()
          FROM (SELECT #columns()
                FROM $table
               ),
               (SELECT 0 as "_ibf_hash_index" from dual UNION ALL SELECT 1 from dual UNION ALL SELECT 2 from dual))
#end

